（1）configparse
mysql,samb,ansible(hosts)

增：
方法一：
config["user"] = {}  #添加空节点
config["user"]["name"] = 'root'   #给节点添加键值
config['DEFAULT']["server_socket"] = "/lib/dns.sock"

方法二：
config["pass"] = {}
tops = config["pass"]
tops["password"] = "123456"
tops["pass_key"] = "/root/.ssh/key.pub"

方法三：
if not config.has_section("user"):  #增加节点
    config.add_section("user")
    config.write(open("named.conf","w"))

#config.set("user","name","root")  #增加键值
#config.write(open("named.conf","w"))

删：
#config.remove_section("user")    #删除节点
#config.write(open("named.conf","w"))

config.remove_option("pass","pass_key")  #删除键值
config.write(open("named.conf","w"))

改：
config.set("user","name","admin")  # 修改键的值
config.write(open("named.conf","w"))

查：

#以列表呈现的节点，除了DEFAULT
print(config.sections())

#打印 DEFAULT 内容
if 'DEFAULT' in config:
    a = config["DEFAULT"]
    print(a["server_ip"])
else:
    print("NULL")

#以迭代器的方法遍历节点
print(config)
for i in config:
    print(i)

#print(config.options("user")) #打印键值，以列表的形式呈现，包括指定的节点以及DEFAULT
#print(config.get("user","name"))  #打印对应节点的key的值。
#print(config.getint("user","name"))

(2)PyYaml
ansible ---> 剧本
k8s -----> 资源清单

[{'hosts': 'webservers', 'vars': {'http_port': 80, 'max_clients': 200},
'tasks': [{'name': 'ensure apache is at the latest version', 'yum': 'pkg=httpd state=latest'}, {'name': 'write the apache config file', 'template': 'src=/srv/httpd.j2 dest=/etc/httpd.conf', 'notify': ['restart apache']}, {'name': 'ensure apache is running', 'service': 'name=httpd state=started'}],
'handlers': [{'name': 'restart apache', 'service': 'name=httpd state=restarted'}]}]

反序列化：
a1 = yaml.load(f1,Loader=yaml.FullLoader)  # python字符类型
a2 = yaml.load_all(f1,Loader=yaml.FullLoader)  #生成器对象

序列化：
yaml.dump(dict,f1)

作业：
（1）完善vmcreat2。
修改成规范配置文件
添加日志

（2）用python实现一个简单的K8s集群的pod创建模板。（yaml，k8s复习）
用python：----》 kind：（Pod，Deployment，Volume ...）kind：Pod
          ----》 image：
          ----》 name：
自动生成资源清单。

pod模板（yaml） ---》 python数据类型  --python--》
                 yaml模块

（3）用python实现ansible的自动化部署(httpd)。
''' python ---> ansible(python); '''

第一步：创建角色,(每一个服务在role中对应一个以服务名定义的目录)---（规范化）
第二步：编辑对应服务的ansible的playbooks。---编辑role  （与python无关）
第三步：解决服务要部署在哪里？
        hosts:
        [nginx]
        192.168.42.31
        192.168.42.32
        这样就写死了。
        （1）测试连通性：
        部署服务需要有一个普通用户 nginx（执行部署）
        yaml :
         user: add nginx
        ssh nginx@192.168.42.31  == seccessful，失败。  nginx --->

        链接ansible的用户 myacount （链接ansible）
        192.168.42.31: useradd myacount
        ssh ansible@192.168.42.31  == seccessful，失败。

        （2）添加主机：
             input(host:>>>)

             选择主机：
             CMDB (资产管理)
             CMDB （数据库） --->  hosts --> ansible
             预留一有个对接CMDB的接口:如何预留？
             （预留一个对接CMDB数据库的接口）

    现阶段如何实现？
    用户输入[nginx,192.168.42.31]：----> dict ----> File  ---> python --->生产hosts （动态生成）
    hosts :
    [nginx]
    192.168.42.31
    ....

第四步： 配置服务(配置中心：管理配置文件（）标准化)
     nginx：
     port: 80
     path: /opt ；/data

     lvs:
     role:
     floatIP:
     realIP:

     现阶段如何实现？
     需要把这些用户修改的配置抓取出来，实现用户 input( :>>> 80) ---> yaml修改

定义hosts  ---->  #
定义剧本   ---->  yaml
os.system("ansible-playbook -i host")